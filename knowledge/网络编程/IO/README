四种经典的IO模型：阻塞IO，非阻塞IO，信号驱动IO，异步IO
阻塞和非阻塞的区别：调用是否直接返回
异步与同步的区别：调用的功能是否由自身完成
异步阻塞和异步非阻塞的区别：功能由别人完成（一般是操作系统），但自身是否等待


多路转接IO：对大量的描述符进行监控，监控描述符是否读/写/异常事件就绪；
	   这样做用户就可以直接对就绪的描述符进行操作，从而避免因为对未就绪的操作符进行操作，而导致的流程阻塞或者效率降低。
IO多路转接模型（多路转接IO的实现）：select模型，poll模型，epoll模型

每个模型的优缺点：
1）select：
    优点：遵循posix接口规则，可以跨平台；
    缺点：select监控的文件描述符由数量限制，FD_SETSIZE = 1024，也就是说select同时只能监控1024个文件描述符；
    	 需要将监控集合由用户态拷贝到内核态中；
    	 select在内核中轮询遍历监控集合，所以当被监控的文件描述符数量增多时，select的效率会下降；
	 select监控完毕后，是将监控集合返回给用户，还需要用户遍历监控集合，来判断就绪的描述符是哪个；
	 select每次监控完毕后，会将未就绪的文件描述符从监控集合中移除，需要用户重复地添加需要被监控地文件描述符；
    
2）poll
    优点：采用事件结构数组进行事件监控，简化了三种集合的操作；
    	 poll监控的文件描述符的数量没有数量限制，在硬件条件允许的情况下，理论上可以一直增加被监控的文件描述符个数；
    缺点：不能跨平台；需要将数据由用户态拷贝到内核态中；
    	  poll在内核中采用轮询遍历的方式监控事件结构数组，所以当文件描述符的数量中增加时，会影响poll的效率；
	  poll监控完毕后，向用户返回的时文件结构数组，需要用户自己去判断已经就绪的文件描述符；
	  
    
3）epoll
    优点：
    缺点：
	
	
	
	

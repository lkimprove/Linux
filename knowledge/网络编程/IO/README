四种经典的IO模型：阻塞IO，非阻塞IO，信号驱动IO，异步IO
阻塞和非阻塞的区别：调用是否直接返回
异步与同步的区别：调用的功能是否由自身完成
异步阻塞和异步非阻塞的区别：功能由别人完成（一般是操作系统），但自身是否等待


多路转接IO：对大量的描述符进行监控，监控描述符是否读/写/异常事件就绪；
	   这样做用户就可以直接对就绪的描述符进行操作，从而避免因为对未就绪的操作符进行操作，而导致的流程阻塞或者效率降低。
IO多路转接模型（多路转接IO的实现）：select模型，poll模型，epoll模型

每个模型的优缺点：
1）select：
    优点：遵循posix接口，可以跨平台
    缺点：select所能监控的描述符个数是有上限的，默认FD_SETSIZE = 1024；
         监控前需要将描述符拷贝到内核中去；
         select内部对描述符进行轮询监控，当监控的描述符数量增多时，其效率会降低；
         每次监控完成后，返回就绪描述符集合，需要用户判断后才能对描述符进行操作；
         监控完毕后，select会将未就绪的描述符移除，所有每次监控完都需要重新添加描述符；
    
2）poll
    优点：采用事件结构数组进行所有事件监控，简化了三种集合的操作；
         监控的描述符的数量没有限制，在硬件条件允许的条件下，理论上可以一直增加需要监控的描述符个数；
    缺点：需要将数据由用户拷贝到内核中；
         poll在内核中采取轮询遍历的方式来监控事件结构数组，所有当被监控的描述符数量增加时，效率会降低；
         用户需要遍历数组才能获取已经就绪的文件描述符；不能跨平台；
    
3）epoll
    优点：
    缺点：
	
	
	
	
